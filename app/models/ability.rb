class Ability
  include CanCan::Ability

  def initialize(user)

    if user.has_role?("super_admin")
      manage :all      
    else

    end    

    # Define abilities for the passed in user here. For example:
    #
    #   user ||= User.new # guest user (not logged in)
    #   if user.admin?
    #     can :manage, :all
    #   else
    #     can :read, :all
    #   end
    #
    # The first argument to `can` is the action you are giving the user permission to do.
    # If you pass :manage it will apply to every action. Other common actions here are
    # :read, :create, :update and :destroy.
    #
    # The second argument is the resource the user can perform the action on. If you pass
    # :all it will apply to every resource. Otherwise pass a Ruby class of the resource.
    #
    # The third argument is an optional hash of conditions to further filter the objects.
    # For example, here the user can only update published articles.
    #
    #   can :update, Article, :published => true
    #
    # See the wiki for details: https://github.com/ryanb/cancan/wiki/Defining-Abilities
  end
end
#--
# generated by 'annotated-rails' gem, please do not remove this line and content below, instead use `bundle exec annotate-rails -d` command
#++
# Table name: roles
#
# * id            :integer         not null
#   name          :string(255)
#   resource_id   :integer
#   resource_type :string(255)
#   created_at    :datetime        not null
#   updated_at    :datetime        not null
#
#  Indexes:
#   index_roles_on_name                                    name
#   index_roles_on_name_and_resource_type_and_resource_id  name,resource_type,resource_id
#--
# generated by 'annotated-rails' gem, please do not remove this line and content above, instead use `bundle exec annotate-rails -d` command
#++
